using System;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using System.IO.Pipes;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Timers;

using static KeithleyCrosspoint.D;

using System.Linq;


/*********************
namespace KeithleyCrosspoint
{
    public static partial class D
    {
        // We provide our own timestamps, since the Visual Studio Debug output window
        // timestamps have a resolution of about 250mSec, which is too crude for our needs.
        static Stopwatch TxWatch = Stopwatch.StartNew();  // Free-running stopwatch for timestamps.
        static SemaphoreSlim TxBox_lock = new SemaphoreSlim(1, 1);
        public static void dprint(string str)
        {
            //await TxBox_lock.WaitAsync();
            //TxBox_lock.Wait(); // Let's do this non-async for now...

            //Debug.Write(Tools.sprintf(format, args));
            double sec = TxWatch.ElapsedMilliseconds / 1000.0;
            double min = Math.Floor(sec / 60.0);
            string tmstr = $"[{min}:{sec:00.000}] ";
            //Console.Write(tmstr + str);
            Debug.Write(tmstr + str);

            //TxBox_lock.Release();
        }

        public static void dprint_ResetTimestamp() => TxWatch.Restart();

        // "Extension" methods to easily "block" and "unblock" a semaphore.
        // This can allow one thread to easily wait for some activity in another thread.
        // This "assumes" a Semaphore that has a Max "request" count of 1.
        // Reminder: Wait() will *decrement* the semaphore counter.
        //           Release() will *increment* the semaphore counter.
        public static void Block(this SemaphoreSlim sem)
        {
            if (sem.CurrentCount > 0)
                sem.Wait(0); // The zero timeout makes sure we don't get stuck here.
        }

        public static void Unblock(this SemaphoreSlim sem)
        {
            // In case someone jumps in the middle, we will catch the exception.
            if (sem.CurrentCount < 1)
                try { sem.Release(); } catch (SemaphoreFullException) { }
        }
    }
}
******************/


namespace CEDTalker
{
    // This is the data packet structure sent to and from Spike2 across the Named Pipe
    // after the Talker channel is opened. These must be declared using StructLayout(...)
    // because we send them as raw bytes across the Named Pipe to Spike2.
    //
    [StructLayout(LayoutKind.Sequential)]
    public class TalkPacket
    {
        public int nSize;  // packet size
        public int nCode;  // packet code/type
        public int nParam1;    // param/error code
        public int nParam2;    // second int param
        public double dParam1, dParam2; // two double params

        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
        public String szParam;

        public void Init()
        {
            // Note that this will correctly get the full size of the *derived*
            // object, just just the size of TalkerBase.
            nSize = Marshal.SizeOf(typeof(TalkPacket));
            nParam1 = 0;
            nParam2 = 0;
            dParam1 = 0;
            dParam2 = 0;
            //szParam[0] = 0;
            szParam = "";
        }

        public TalkPacket()
        {
            //printf("TalkBase() constructor called (our size is %d).\n", Marshal.SizeOf(this));
            Init();
        }
    }

    //
    // Packet to tell Spike2 about us.
    //
    [StructLayout(LayoutKind.Sequential)]
    public class TalkerInfo //: TalkBase
    {
        public int nSize;  // packet size
        public int nCode;  // packet code/type
        public int nChans; // Number of channels supported by us (this Talker)
        public int nVer;   // Talker interface version that we support (either 200 300)
        public double dParam1, dParam2; // two double params

        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
        public String szDesc;

        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 12)]
        public String szName;
        public int nVerComp;
        public int nConfigID;
        public int nFlags;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public int[] nSpare = new int[32];

        public TalkerInfo() //(String Name, String Description)
        {
            nSize = Marshal.SizeOf(this);
        }
    }


    class CEDTalker : IDisposable
    {
        public NamedPipeClientStream PipeStream;
        TalkPacket tp = new TalkPacket();
        TalkerInfo ti = new TalkerInfo();
        SafeHandle PipeStreamHandle;
        System.Timers.Timer PipeReadTimer;

        ~CEDTalker()
        {
            dprint("CEDTalker Destructor called.\n");
            Dispose(false);
            //Disconnect();
            //dprint("CEDTalker Destructor finished.\n");
        }

        public void Connect()
        {
            if (PipeStream != null)
            {
                if (PipeStream.IsConnected)  // Already Connected?
                    return;
                else
                {
                    // This handles the case where Spike2 was possibly closed and re-started
                    // while we still had the pipe open, in which case the pipe is "broken".
                    ClosePipeStream();
                }
            }

            dprint($"Connect() called on thread {Thread.CurrentThread.ManagedThreadId}\n");
            // There are TWO steps here. First connect to the Spike2Talkers pipe.
            // We then close this, and re-connect to the pipe specific for our Talker.
            PipeStream = new NamedPipeClientStream("Spike2Talkers");
            dprint("Trying to connect...\n");
            PipeStream.Connect();
            SendConnect();

            // Block and wait for reply from Spike2.
            int NRead = ReadPacket();
            dprint($"Read {NRead} bytes, resp code {PipeBuffer[4]}\n");
            PipeStream.Close();
            Thread.Sleep(50);

            dprint("Opening Talker-specific pipe...\n");
            // Now open the pipe specific to our talker.
            PipeStream = new NamedPipeClientStream("S2Talk_CSharpTalk");

            if (PipeStream == null)
            {
                dprint("Could not open Talker client pipe.\n");
                return;
            }

            dprint("Connecting to S2Talk_CSharpTalk.\n");

            PipeStream.Connect();
            PipeStreamHandle = PipeStream.SafePipeHandle;

            // Periodically check if there is anything to read.
            PipeReadTimer = new System.Timers.Timer();
            PipeReadTimer.AutoReset = true;
            PipeReadTimer.Interval = 50;
            PipeReadTimer.Elapsed += PipeReadTimer_Elapsed;
            PipeReadTimer.Enabled = true;

            //HandlePacketsAsync();

            //ReadPacket();
            //HandlePacket();

            //dprint("Starting Pipe Read task...\n");
            //ReadPipeTask = Task.Run(() => HandlePackets());
            //dprint("Pipe Read task is going!!\n");
        }

        void ClosePipeStream()
        {
            PipeReadTimer.Enabled = false;
            Disconnect();

            PipeStreamHandle.Dispose();
            PipeStreamHandle = null;
            PipeBufferGCHandle.Free();
            PipeBuffer = null;
            PipeStream.Dispose();
            PipeStream = null;
        }

        private void PipeReadTimer_Elapsed(object sender, ElapsedEventArgs e)
        {
            CheckForPackets();
        }

        // The "IDisposable" pattern is very specific, and this is basically just copied
        // from the Microsoft docs, to don't mess with these two methods.
        bool HasBeenDisposed = false;
        public void Dispose()
        {
            dprint("CEDTalker Dispose() called...\n");
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        protected virtual void Dispose(bool disposing)
        {
            dprint($"CEDTalker Dispose({disposing}) called, HasBeenDisposed:{HasBeenDisposed}\n");

            if (HasBeenDisposed) return;
            if(disposing)
            {
                ClosePipeStream();
            }
            HasBeenDisposed = true;
        }

        public void Disconnect()
        {
            dprint("Disconnect called.\n");
            if ((PipeStream == null) || !PipeStream.IsConnected)  // Already Disconnected?
            {
                dprint("Null or disconnected PipeStream.\n");
                return;
            }
            
            SendDisconnect();
            PipeStream.Close();
        }

        void Str2Byte(String str, byte[] bytes)
        {
            Encoding.UTF8.GetBytes(str, 0, str.Length, bytes, 0);
            // Make sure string is null terminated.
            bytes[str.Length] = 0;
        }

        byte[] PipeBuffer = null;
        GCHandle PipeBufferGCHandle;
        public void AllocPipeBuffer(int size)
        {
            if (PipeBuffer != null)
                PipeBufferGCHandle.Free();
            PipeBuffer = new byte[size];
            PipeBufferGCHandle = GCHandle.Alloc(PipeBuffer, GCHandleType.Pinned);
        }

        public void SendPacket(Object pkt)
        {
            int size = Marshal.SizeOf(pkt);

            if ((PipeBuffer == null) || (size > PipeBuffer.Length))
                AllocPipeBuffer(size);

            Marshal.StructureToPtr(pkt, PipeBufferGCHandle.AddrOfPinnedObject(), false);

            PipeStream.Write(PipeBuffer, 0, size);
        }

        // Send a Talker Connect request packet.
        void SendConnect()
        {
            tp.nSize = Marshal.SizeOf(typeof(TalkPacket));
            dprint($"tp.nSize: {tp.nSize}\n");
            tp.nCode = 0; // Connect
            tp.nParam1 = 2; // Talker version number
            tp.szParam = "CSharpTalk";

            //printf("Some bytes of szParam: %d %d %d\n",
            //    tp.szParam[0], tp.szParam[1], tp.szParam[2]);

            //printf("About to send TalkPacket...\n");
            SendPacket(tp);
        }

        public void SendDisconnect()
        {
            // We are requesting to quit, so send Spike2 a Close packet.
            tp.Init();
            tp.nCode = 14; // close
            SendPacket(tp);
        }

        void SendTalkerInfo()
        {
            ti.nSize = Marshal.SizeOf(typeof(TalkerInfo));
            ti.nCode = 1 | 0x40000000;
            ti.nChans = 0;
            ti.nVer = 200;
            ti.szName = "CSharpTalk";
            ti.szDesc = "This is my C# Talker! Isn't that cool??!!";
            ti.nVerComp = 200;
            ti.nFlags = 0x10;   // TKF_ACTALL - notify of start/stop sampling,
                                // even if we have no channels.
            SendPacket(ti);
        }

        public void SendCmd(String str)
        {
            dprint($"    SendCmd({str})  sending...   ");
            tp.nSize = Marshal.SizeOf(typeof(TalkPacket));
            tp.nCode = 23;
            tp.nParam1 = 0;
            tp.szParam = str;
            SendPacket(tp);
            dprint("DONE Sending.\n");
        }

        public void SendString(String str)
        {
            dprint($"CED Sending String: '{str}'");
            tp.nSize = Marshal.SizeOf(typeof(TalkPacket));
            tp.nCode = 22;
            tp.nParam1 = 0;
            tp.szParam = str;
            SendPacket(tp);
        }

        public void HandlePacketsAsync()
        {
            dprint("At top of HandlePacketsAsync()\n");
            PipeStream.ReadAsync(PipeBuffer, 0, Marshal.SizeOf(typeof(TalkPacket))).ContinueWith(t =>
            {
                dprint($"Received packet {t.Result} bytes\n");
                if (t.Result != 0)
                {
                    Marshal.PtrToStructure(PipeBufferGCHandle.AddrOfPinnedObject(), tp);
                    HandlePacket();
                }
                HandlePacketsAsync(); // Start another reader task.
            }
            );
        }

        public void HandlePacketsBeginRead()
        {
            dprint("At top of HandlePacketsBeginRead()\n");
        }

        //public void 

        // Handle any incoming packets.
        public void HandlePackets()
        {
            while (true) // ??? how to nicely see if we have more left to read?
            {
                dprint($"In HandlePackets() at top of Read loop (thread ID {Thread.CurrentThread.ManagedThreadId})...\n");
                ReadPacket();
                HandlePacket();
            }
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool PeekNamedPipe(SafeHandle handle,
            byte[] buffer, uint nBufferSize, ref uint bytesRead,
            ref uint bytesAvail, ref uint BytesLeftThisMessage);

        uint BytesAvailable()
        {
            byte[] aPeekBuffer = new byte[1];
            uint aPeekedBytes = 0;
            uint aAvailBytes = 0;
            uint aLeftBytes = 0;

            bool aPeekedSuccess = PeekNamedPipe(
                PipeStreamHandle,
                aPeekBuffer, 1,
                //aPeekBuffer, 0,
                ref aPeekedBytes, ref aAvailBytes, ref aLeftBytes);

            //if (aLeftBytes > 0)
            //    printf("Success %d, Peeked %d, Avail %d Left %d.\n",
            //        aPeekedSuccess?1:0, aPeekedBytes, aAvailBytes, aLeftBytes);

            if (aPeekedSuccess && (aAvailBytes > 0))
                return aAvailBytes;
            else
                return 0;
        }

        public void CheckForPackets()
        {
            while (BytesAvailable() > 0)
            {
                ReadPacket();
                HandlePacket();
            }
        }


        // Return number of bytes read.
        public int ReadPacket()
        {
            int NBytes = PipeStream.Read(PipeBuffer, 0, Marshal.SizeOf(typeof(TalkPacket)));
            dprint($"  ReadPacket() read {NBytes} bytes\n");
            Marshal.PtrToStructure(PipeBufferGCHandle.AddrOfPinnedObject(), tp);
            return NBytes;
        }

        public void HandlePacket()
        {
            //int PktCode = PipeBuffer[4];
            int PktCode = tp.nCode;
            dprint($"    In HandlePacket(). Code {PktCode}\n");

            switch (PktCode)
            {
                case 1: // GetInfo request from Spike2.
                    dprint($"Received GetInfo request (Spike2 version {tp.nParam1}). Sending TalkerInfo packet.\n");
                    SendTalkerInfo();
                    break;
                case 10:
                    dprint("Got 'SampleClear' from Spike2.\n");
                    break;
                case 13:
                    dprint("Got 'SampleStart' from Spike2.\n");
                    break;
                case 15:
                    dprint("Got 'SampleStop' from Spike2.\n");
                    break;
                case 22:
                    dprint($"Got SendString: '{tp.szParam}'\n");
                    break;
                default:
                    dprint($"Code {PktCode}  NOT HANDLED!!\n");
                    break;
            }
        }

        // These functions are called by the CMDProcessor for the scripting language. We
        // include the CED...() preface with these method names, to highlight that these
        // particular functions are called from outside the class by the Command
        // Processor scripts.
        string CEDFileBasePath = "";
        public void CEDConnect() { Connect(); }
        //public void CEDSetPath(string Path) { CEDFileBasePath = Path; }
        public void CEDSetPath(string[] tokens)
        {
            CEDFileBasePath = String.Join(" ", tokens.Skip(1));
            dprint($"Got path: '{CEDFileBasePath}'\n");
        }
        public void CEDConfigLoad(string FileName) { SendCmd($"configload|{FileName}"); }
        public void CEDOpen() { SendCmd("samplestart"); }
        public void CEDCloseAndSave(string FTextBox, string FName)
        {
            if (!string.IsNullOrEmpty(CEDFileBasePath))
                CEDFileBasePath = CEDFileBasePath.TrimEnd('\\') + "\\";

            string FullName = $"{CEDFileBasePath}{DateTime.Now.ToString("yyyy_MMdd_hhmmss")}_{FTextBox}_{FName}.smr";
            SendCmd($"samplestop|{FullName}|close");
        }

        // Pass in the full path and file name for a Spike2 script to run.
        public void CEDRunScript(string[] tokens) {SendCmd($"ScriptRun|{String.Join(" ", tokens.Skip(1))}");}
        public void CEDSendString(string[] tokens) { SendString(String.Join(" ", tokens.Skip(1))); }

        
        // For testing things.
        int filecount = 0;
        public void DoKeysForTesting(string Key)
        {
            dprint($"CEDTalker got keypress: '{Key}'\n");
            switch (Key)
            {
                case "q":
                    //goto QUIT_LOOP;
                    break;

                case "!": SendCmd("samplestart"); break;
                case "1":
                    SendCmd($"samplestop|c:\\downloads\\DataFile_{++filecount:d03}.smr|close");
                    break;
                case "W": SendCmd("samplewrite|on"); break;
                case "w": SendCmd("samplewrite|off"); break;
                case "2": SendCmd("sampleabort"); break;
                case "8": SendString("A string from C# to Spike2."); break;
                case "9": SendCmd("ScriptRun|c:\\downloads\\daletest.s2s"); break;
                case "0": SendCmd("ScriptRun|c:\\downloads\\daletest2.s2s"); break;

                case "d": Disconnect(); break;
            }

            // Test doing this "synchronously".
            //ReadPacket();
            //HandlePacket();
        }
    }
}
